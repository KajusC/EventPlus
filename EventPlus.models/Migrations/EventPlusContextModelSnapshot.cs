// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eventplus.models.context;

#nullable disable

namespace eventplus.models.Migrations
{
    [DbContext(typeof(EventPlusContext))]
    partial class EventPlusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eventplus.models.Entities.Administrator", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.HasKey("IdUser")
                        .HasName("administrator_pkey");

                    b.ToTable("administrator", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_category");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdCategory")
                        .HasName("category_pkey");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Equipment", b =>
                {
                    b.Property<int>("IdEquipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_equipment");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEquipment"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdEquipment")
                        .HasName("equipment_pkey");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_event");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEvent"));

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("FkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_event_locationid_event_location");

                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.Property<int?>("MaxTicketCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_ticket_count");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("IdEvent")
                        .HasName("event_pkey");

                    b.HasIndex("Category");

                    b.HasIndex("FkOrganiseridUser");

                    b.HasIndex(new[] { "FkEventLocationidEventLocation" }, "event_fk_event_locationid_event_location_key")
                        .IsUnique();

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.EventLocation", b =>
                {
                    b.Property<int>("IdEventLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_event_location");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEventLocation"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Contacts")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contacts");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<int?>("Equipment")
                        .HasColumnType("integer")
                        .HasColumnName("turima_ÄÆranga");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("IdEventLocation")
                        .HasName("event_location_pkey");

                    b.HasIndex("Equipment");

                    b.ToTable("event_location", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.EventPartner", b =>
                {
                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.HasKey("FkEventidEvent")
                        .HasName("renginiopartneris_pkey");

                    b.ToTable("renginiopartneris", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.EventPerformer", b =>
                {
                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.HasKey("FkEventidEvent")
                        .HasName("renginioatlikÄ—jas_pkey");

                    b.ToTable("renginioatlikÄ—jas", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_feedback");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFeedback"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<double?>("Vote")
                        .HasColumnType("double precision")
                        .HasColumnName("vote");

                    b.HasKey("IdFeedback")
                        .HasName("feedback_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("FkUseridUser");

                    b.HasIndex("Type");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.FeedbackType", b =>
                {
                    b.Property<int>("IdFeedbackType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_feedback_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFeedbackType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdFeedbackType")
                        .HasName("feedback_type_pkey");

                    b.ToTable("feedback_type", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Loyalty", b =>
                {
                    b.Property<int>("IdLoyalty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_loyalty");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLoyalty"));

                    b.Property<int?>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.HasKey("IdLoyalty")
                        .HasName("loyalty_pkey");

                    b.ToTable("loyalty", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Organiser", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<int?>("FollowerAmount")
                        .HasColumnType("integer")
                        .HasColumnName("follower_amount");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.HasKey("IdUser")
                        .HasName("organiser_pkey");

                    b.ToTable("organiser", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Partner", b =>
                {
                    b.Property<int>("IdPartner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_partner");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPartner"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("IdPartner")
                        .HasName("partner_pkey");

                    b.ToTable("partner", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Performer", b =>
                {
                    b.Property<int>("IdPerformer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_performer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPerformer"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Profesija")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profesija");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.HasKey("IdPerformer")
                        .HasName("performer_pkey");

                    b.ToTable("performer", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Seating", b =>
                {
                    b.Property<int>("IdSeating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_seating");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSeating"));

                    b.Property<int>("FkSectoridSector")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorid_sector");

                    b.Property<int>("FkSectorfkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorfk_event_locationid_event_location");

                    b.Property<int>("FkTicketidTicket")
                        .HasColumnType("integer")
                        .HasColumnName("fk_ticketid_ticket");

                    b.Property<int?>("Place")
                        .HasColumnType("integer")
                        .HasColumnName("place");

                    b.Property<int?>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.HasKey("IdSeating", "FkSectoridSector", "FkSectorfkEventLocationidEventLocation")
                        .HasName("seating_pkey");

                    b.HasIndex("FkSectoridSector", "FkSectorfkEventLocationidEventLocation");

                    b.HasIndex(new[] { "FkTicketidTicket" }, "seating_fk_ticketid_ticket_key")
                        .IsUnique();

                    b.ToTable("seating", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Sector", b =>
                {
                    b.Property<int>("IdSector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sector");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSector"));

                    b.Property<int>("FkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_event_locationid_event_location");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdSector", "FkEventLocationidEventLocation")
                        .HasName("sector_pkey");

                    b.HasIndex("FkEventLocationidEventLocation");

                    b.ToTable("sector", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.SectorPrice", b =>
                {
                    b.Property<int>("IdSectorPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_sector_price");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSectorPrice"));

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<int>("FkSectorfkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorfk_event_locationid_event_location");

                    b.Property<int>("FkSectoridSector")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorid_sector");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("IdSectorPrice")
                        .HasName("sector_price_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("FkSectoridSector", "FkSectorfkEventLocationidEventLocation");

                    b.ToTable("sector_price", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ticket");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTicket"));

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.Property<DateOnly?>("GenerationDate")
                        .HasColumnType("date")
                        .HasColumnName("generation_date");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("QrCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("qr_code");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("IdTicket")
                        .HasName("ticket_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("FkUseridUser");

                    b.HasIndex("Type");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.TicketType", b =>
                {
                    b.Property<int>("IdTicketType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_ticket_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTicketType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdTicketType")
                        .HasName("ticket_type_pkey");

                    b.ToTable("ticket_type", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<int>("FkLoyaltyidLoyalty")
                        .HasColumnType("integer")
                        .HasColumnName("fk_loyaltyid_loyalty");

                    b.Property<DateOnly?>("LastLogin")
                        .HasColumnType("date")
                        .HasColumnName("last_login");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "FkLoyaltyidLoyalty" }, "User_fk_loyaltyid_loyalty_key")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.UserRequestInformation", b =>
                {
                    b.Property<int>("IdUserRequestInformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user_request_information");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUserRequestInformation"));

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("klausimas");

                    b.Property<string>("Response")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("atsakas");

                    b.HasKey("IdUserRequestInformation")
                        .HasName("user_request_information_pkey");

                    b.ToTable("user_request_information", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.UserType", b =>
                {
                    b.Property<int>("IdUserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_user_type");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUserType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdUserType")
                        .HasName("user_type_pkey");

                    b.ToTable("user_type", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Userrequest", b =>
                {
                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.HasKey("FkUseridUser")
                        .HasName("userrequest_pkey");

                    b.ToTable("userrequest", (string)null);
                });

            modelBuilder.Entity("eventplus.models.Entities.Administrator", b =>
                {
                    b.HasOne("eventplus.models.Entities.User", "IdUserNavigation")
                        .WithOne("Administrator")
                        .HasForeignKey("eventplus.models.Entities.Administrator", "IdUser")
                        .IsRequired()
                        .HasConstraintName("administrator_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Event", b =>
                {
                    b.HasOne("eventplus.models.Entities.Category", "CategoryNavigation")
                        .WithMany("Events")
                        .HasForeignKey("Category")
                        .HasConstraintName("event_category_fkey");

                    b.HasOne("eventplus.models.Entities.EventLocation", "FkEventLocationidEventLocationNavigation")
                        .WithOne("Event")
                        .HasForeignKey("eventplus.models.Entities.Event", "FkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("event_fk_event_locationid_event_location_fkey");

                    b.HasOne("eventplus.models.Entities.Organiser", "FkOrganiseridUserNavigation")
                        .WithMany("Events")
                        .HasForeignKey("FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("event_fk_organiserid_user_fkey");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("FkEventLocationidEventLocationNavigation");

                    b.Navigation("FkOrganiseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.EventLocation", b =>
                {
                    b.HasOne("eventplus.models.Entities.Equipment", "EquipmentNavigation")
                        .WithMany("EventLocations")
                        .HasForeignKey("Equipment")
                        .HasConstraintName("event_location_turima_ÄÆranga_fkey");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.EventPartner", b =>
                {
                    b.HasOne("eventplus.models.Entities.Event", "FkEventidEventNavigation")
                        .WithOne("EventPartner")
                        .HasForeignKey("eventplus.models.Entities.EventPartner", "FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("renginiopartneris_fk_eventid_event_fkey");

                    b.Navigation("FkEventidEventNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.EventPerformer", b =>
                {
                    b.HasOne("eventplus.models.Entities.Event", "FkEventidEventNavigation")
                        .WithOne("EventPerformer")
                        .HasForeignKey("eventplus.models.Entities.EventPerformer", "FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("renginioatlikÄ—jas_fk_eventid_event_fkey");

                    b.Navigation("FkEventidEventNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Feedback", b =>
                {
                    b.HasOne("eventplus.models.Entities.Event", "FkEventidEventNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("feedback_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Entities.User", "FkUseridUserNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("feedback_fk_userid_user_fkey");

                    b.HasOne("eventplus.models.Entities.FeedbackType", "TypeNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Type")
                        .HasConstraintName("feedback_type_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("FkUseridUserNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Organiser", b =>
                {
                    b.HasOne("eventplus.models.Entities.User", "IdUserNavigation")
                        .WithOne("Organiser")
                        .HasForeignKey("eventplus.models.Entities.Organiser", "IdUser")
                        .IsRequired()
                        .HasConstraintName("organiser_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Seating", b =>
                {
                    b.HasOne("eventplus.models.Entities.Ticket", "FkTicketidTicketNavigation")
                        .WithOne("Seating")
                        .HasForeignKey("eventplus.models.Entities.Seating", "FkTicketidTicket")
                        .IsRequired()
                        .HasConstraintName("seating_fk_ticketid_ticket_fkey");

                    b.HasOne("eventplus.models.Entities.Sector", "Sector")
                        .WithMany("Seatings")
                        .HasForeignKey("FkSectoridSector", "FkSectorfkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("seating_fk_sectorid_sector_fk_sectorfk_event_locationid_ev_fkey");

                    b.Navigation("FkTicketidTicketNavigation");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("eventplus.models.Entities.Sector", b =>
                {
                    b.HasOne("eventplus.models.Entities.EventLocation", "FkEventLocationidEventLocationNavigation")
                        .WithMany("Sectors")
                        .HasForeignKey("FkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("sector_fk_event_locationid_event_location_fkey");

                    b.Navigation("FkEventLocationidEventLocationNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.SectorPrice", b =>
                {
                    b.HasOne("eventplus.models.Entities.Event", "FkEventidEventNavigation")
                        .WithMany("SectorPrices")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("sector_price_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Entities.Sector", "Sector")
                        .WithMany("SectorPrices")
                        .HasForeignKey("FkSectoridSector", "FkSectorfkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("sector_price_fk_sectorid_sector_fk_sectorfk_event_location_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("eventplus.models.Entities.Ticket", b =>
                {
                    b.HasOne("eventplus.models.Entities.Event", "FkEventidEventNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("ticket_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Entities.User", "FkUseridUserNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("ticket_fk_userid_user_fkey");

                    b.HasOne("eventplus.models.Entities.TicketType", "TypeNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Type")
                        .HasConstraintName("ticket_type_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("FkUseridUserNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.User", b =>
                {
                    b.HasOne("eventplus.models.Entities.Loyalty", "FkLoyaltyidLoyaltyNavigation")
                        .WithOne("User")
                        .HasForeignKey("eventplus.models.Entities.User", "FkLoyaltyidLoyalty")
                        .IsRequired()
                        .HasConstraintName("User_fk_loyaltyid_loyalty_fkey");

                    b.Navigation("FkLoyaltyidLoyaltyNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Userrequest", b =>
                {
                    b.HasOne("eventplus.models.Entities.User", "FkUseridUserNavigation")
                        .WithOne("Userrequest")
                        .HasForeignKey("eventplus.models.Entities.Userrequest", "FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("userrequest_fk_userid_user_fkey");

                    b.Navigation("FkUseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("eventplus.models.Entities.Equipment", b =>
                {
                    b.Navigation("EventLocations");
                });

            modelBuilder.Entity("eventplus.models.Entities.Event", b =>
                {
                    b.Navigation("EventPartner");

                    b.Navigation("EventPerformer");

                    b.Navigation("Feedbacks");

                    b.Navigation("SectorPrices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("eventplus.models.Entities.EventLocation", b =>
                {
                    b.Navigation("Event");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("eventplus.models.Entities.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("eventplus.models.Entities.Loyalty", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("eventplus.models.Entities.Organiser", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("eventplus.models.Entities.Sector", b =>
                {
                    b.Navigation("Seatings");

                    b.Navigation("SectorPrices");
                });

            modelBuilder.Entity("eventplus.models.Entities.Ticket", b =>
                {
                    b.Navigation("Seating");
                });

            modelBuilder.Entity("eventplus.models.Entities.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("eventplus.models.Entities.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Feedbacks");

                    b.Navigation("Organiser");

                    b.Navigation("Tickets");

                    b.Navigation("Userrequest");
                });
#pragma warning restore 612, 618
        }
    }
}
