// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eventplus.models.Infrastructure.context;

#nullable disable

namespace eventplus.models.Migrations
{
    [DbContext(typeof(EventPlusContext))]
    partial class EventPlusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("eventplus.models.Domain.Events.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .HasColumnType("integer")
                        .HasColumnName("id_category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdCategory")
                        .HasName("category_pkey");

                    b.ToTable("category", "models");

                    b.HasData(
                        new
                        {
                            IdCategory = 1,
                            Name = "Music"
                        },
                        new
                        {
                            IdCategory = 2,
                            Name = "Theatre"
                        },
                        new
                        {
                            IdCategory = 3,
                            Name = "Opera"
                        },
                        new
                        {
                            IdCategory = 4,
                            Name = "Exposition"
                        },
                        new
                        {
                            IdCategory = 5,
                            Name = "Fashion show"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Equipment", b =>
                {
                    b.Property<int>("IdEquipment")
                        .HasColumnType("integer")
                        .HasColumnName("id_equipment");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdEquipment")
                        .HasName("equipment_pkey");

                    b.ToTable("equipment", "models");

                    b.HasData(
                        new
                        {
                            IdEquipment = 1,
                            Name = "Sound System"
                        },
                        new
                        {
                            IdEquipment = 2,
                            Name = "TV"
                        },
                        new
                        {
                            IdEquipment = 3,
                            Name = "Microphone"
                        },
                        new
                        {
                            IdEquipment = 4,
                            Name = "Projector"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .HasColumnType("integer")
                        .HasColumnName("id_event");

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("FkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_event_locationid_event_location");

                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.Property<int?>("MaxTicketCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_ticket_count");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("IdEvent")
                        .HasName("event_pkey");

                    b.HasIndex("Category");

                    b.HasIndex("FkOrganiseridUser");

                    b.HasIndex(new[] { "FkEventLocationidEventLocation" }, "event_fk_event_locationid_event_location_key")
                        .IsUnique();

                    b.ToTable("event", "models");

                    b.HasData(
                        new
                        {
                            IdEvent = 1,
                            Category = 2,
                            Description = "Annual technology conference",
                            EndDate = new DateOnly(2025, 6, 17),
                            FkEventLocationidEventLocation = 1,
                            FkOrganiseridUser = 1,
                            MaxTicketCount = 500,
                            Name = "Tech Conference 2025",
                            StartDate = new DateOnly(2025, 6, 15)
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.EventLocation", b =>
                {
                    b.Property<int>("IdEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("id_event_location");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Contacts")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contacts");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<int?>("HoldingEquipment")
                        .HasColumnType("integer")
                        .HasColumnName("holding_equipment");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("IdEventLocation")
                        .HasName("event_location_pkey");

                    b.HasIndex("HoldingEquipment");

                    b.ToTable("event_location", "models");

                    b.HasData(
                        new
                        {
                            IdEventLocation = 1,
                            Address = "123 Main St",
                            Capacity = 500,
                            City = "Boston",
                            Contacts = "contact@venue.com",
                            Country = "USA",
                            HoldingEquipment = 2,
                            Name = "Conference Center",
                            Price = 1000.0
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Eventpartner", b =>
                {
                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.HasKey("FkEventidEvent")
                        .HasName("eventpartner_pkey");

                    b.ToTable("eventpartner", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Eventperformer", b =>
                {
                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.HasKey("FkEventidEvent")
                        .HasName("eventperformer_pkey");

                    b.ToTable("eventperformer", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Partner", b =>
                {
                    b.Property<int>("IdPartner")
                        .HasColumnType("integer")
                        .HasColumnName("id_partner");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("IdPartner")
                        .HasName("partner_pkey");

                    b.ToTable("partner", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Performer", b =>
                {
                    b.Property<int>("IdPerformer")
                        .HasColumnType("integer")
                        .HasColumnName("id_performer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Profession")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profession");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.HasKey("IdPerformer")
                        .HasName("performer_pkey");

                    b.ToTable("performer", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.AdministratorFeedback", b =>
                {
                    b.Property<int>("FkAdministratoridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_administratorid_user");

                    b.Property<int>("FkFeedbackidFeedback")
                        .HasColumnType("integer")
                        .HasColumnName("fk_feedbackid_feedback");

                    b.HasKey("FkAdministratoridUser", "FkFeedbackidFeedback")
                        .HasName("administrator_feedback_pkey");

                    b.HasIndex(new[] { "FkFeedbackidFeedback" }, "administrator_feedback_fk_feedbackid_feedback_key")
                        .IsUnique();

                    b.ToTable("administrator_feedback", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .HasColumnType("integer")
                        .HasColumnName("id_feedback");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("IdFeedback")
                        .HasName("feedback_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("Type");

                    b.ToTable("feedback", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.FeedbackType", b =>
                {
                    b.Property<int>("IdFeedbackType")
                        .HasColumnType("integer")
                        .HasColumnName("id_feedback_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdFeedbackType")
                        .HasName("feedback_type_pkey");

                    b.ToTable("feedback_type", "models");

                    b.HasData(
                        new
                        {
                            IdFeedbackType = 1,
                            Name = "Positive"
                        },
                        new
                        {
                            IdFeedbackType = 2,
                            Name = "Negative"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.UserFeedback", b =>
                {
                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.Property<int>("FkFeedbackidFeedback")
                        .HasColumnType("integer")
                        .HasColumnName("fk_feedbackid_feedback");

                    b.HasKey("FkUseridUser", "FkFeedbackidFeedback")
                        .HasName("user_feedback_pkey");

                    b.HasIndex(new[] { "FkFeedbackidFeedback" }, "user_feedback_fk_feedbackid_feedback_key")
                        .IsUnique();

                    b.ToTable("user_feedback", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Seating", b =>
                {
                    b.Property<int>("IdSeating")
                        .HasColumnType("integer")
                        .HasColumnName("id_seating");

                    b.Property<int?>("FkSectoridSector")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorid_sector");

                    b.Property<int?>("Place")
                        .HasColumnType("integer")
                        .HasColumnName("place");

                    b.Property<int?>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.HasKey("IdSeating")
                        .HasName("seating_pkey");

                    b.HasIndex("FkSectoridSector");

                    b.ToTable("seating", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Sector", b =>
                {
                    b.Property<int>("IdSector")
                        .HasColumnType("integer")
                        .HasColumnName("id_sector");

                    b.Property<int>("FkEventLocationidEventLocation")
                        .HasColumnType("integer")
                        .HasColumnName("fk_event_locationid_event_location");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdSector")
                        .HasName("sector_pkey");

                    b.HasIndex("FkEventLocationidEventLocation");

                    b.ToTable("sector", "models");

                    b.HasData(
                        new
                        {
                            IdSector = 1,
                            FkEventLocationidEventLocation = 1,
                            Name = "Main Hall"
                        },
                        new
                        {
                            IdSector = 2,
                            FkEventLocationidEventLocation = 1,
                            Name = "VIP Section"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.SectorPrice", b =>
                {
                    b.Property<int>("IdSectorPrice")
                        .HasColumnType("integer")
                        .HasColumnName("id_sector_price");

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<int>("FkSectoridSector")
                        .HasColumnType("integer")
                        .HasColumnName("fk_sectorid_sector");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("IdSectorPrice")
                        .HasName("sector_price_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("FkSectoridSector");

                    b.ToTable("sector_price", "models");

                    b.HasData(
                        new
                        {
                            IdSectorPrice = 1,
                            FkEventidEvent = 1,
                            FkSectoridSector = 1,
                            Price = 50.0
                        },
                        new
                        {
                            IdSectorPrice = 2,
                            FkEventidEvent = 1,
                            FkSectoridSector = 2,
                            Price = 150.0
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.AdministratorTicket", b =>
                {
                    b.Property<int>("FkAdministratoridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_administratorid_user");

                    b.Property<int>("FkTicketidTicket")
                        .HasColumnType("integer")
                        .HasColumnName("fk_ticketid_ticket");

                    b.HasKey("FkAdministratoridUser", "FkTicketidTicket")
                        .HasName("administrator_ticket_pkey");

                    b.HasIndex(new[] { "FkTicketidTicket" }, "administrator_ticket_fk_ticketid_ticket_key")
                        .IsUnique();

                    b.ToTable("administrator_ticket", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .HasColumnType("integer")
                        .HasColumnName("id_ticket");

                    b.Property<int>("FkEventidEvent")
                        .HasColumnType("integer")
                        .HasColumnName("fk_eventid_event");

                    b.Property<int>("FkSeatingidSeating")
                        .HasColumnType("integer")
                        .HasColumnName("fk_seatingid_seating");

                    b.Property<int>("FkTicketstatus")
                        .HasColumnType("integer")
                        .HasColumnName("fk_ticketstatus");

                    b.Property<DateOnly?>("GenerationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("generation_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("QrCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("qr_code");

                    b.Property<DateTime?>("ScannedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scanned_date");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("IdTicket")
                        .HasName("ticket_pkey");

                    b.HasIndex("FkEventidEvent");

                    b.HasIndex("FkTicketstatus");

                    b.HasIndex("Type");

                    b.HasIndex(new[] { "FkSeatingidSeating" }, "ticket_fk_seatingid_seating_key")
                        .IsUnique();

                    b.ToTable("ticket", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.TicketType", b =>
                {
                    b.Property<int>("IdTicketType")
                        .HasColumnType("integer")
                        .HasColumnName("id_ticket_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdTicketType")
                        .HasName("ticket_type_pkey");

                    b.ToTable("ticket_type", "models");

                    b.HasData(
                        new
                        {
                            IdTicketType = 1,
                            Name = "Standard"
                        },
                        new
                        {
                            IdTicketType = 2,
                            Name = "VIP"
                        },
                        new
                        {
                            IdTicketType = 3,
                            Name = "Super-VIP"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.Ticketstatus", b =>
                {
                    b.Property<int>("IdStatus")
                        .HasColumnType("integer")
                        .HasColumnName("id_status");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdStatus")
                        .HasName("ticketstatus_pkey");

                    b.ToTable("ticketstatus", "models");

                    b.HasData(
                        new
                        {
                            IdStatus = 1,
                            Name = "Active"
                        },
                        new
                        {
                            IdStatus = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            IdStatus = 3,
                            Name = "Scanned"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.UserTicket", b =>
                {
                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.Property<int>("FkTicketidTicket")
                        .HasColumnType("integer")
                        .HasColumnName("fk_ticketid_ticket");

                    b.HasKey("FkUseridUser", "FkTicketidTicket")
                        .HasName("user_ticket_pkey");

                    b.HasIndex(new[] { "FkTicketidTicket" }, "user_ticket_fk_ticketid_ticket_key")
                        .IsUnique();

                    b.ToTable("user_ticket", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("id_question");

                    b.Property<int?>("FkAdministratoridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_administratorid_user");

                    b.Property<string>("FormulatedQuestion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("formulated_question");

                    b.HasKey("IdQuestion")
                        .HasName("question_pkey");

                    b.HasIndex("FkAdministratoridUser");

                    b.ToTable("question", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswer", b =>
                {
                    b.Property<int>("IdUserRequestAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("id_user_request_answer");

                    b.Property<string>("Answer")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("answer");

                    b.Property<int>("FkQuestionidQuestion")
                        .HasColumnType("integer")
                        .HasColumnName("fk_questionid_question");

                    b.HasKey("IdUserRequestAnswer")
                        .HasName("user_request_answer_pkey");

                    b.HasIndex("FkQuestionidQuestion");

                    b.ToTable("user_request_answer", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerAdministrator", b =>
                {
                    b.Property<int>("FkUserRequestAnsweridUserRequestAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_request_answerid_user_request_answer");

                    b.Property<int>("FkAdministratoridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_administratorid_user");

                    b.HasKey("FkUserRequestAnsweridUserRequestAnswer", "FkAdministratoridUser")
                        .HasName("user_request_answer_administrator_pkey");

                    b.HasIndex("FkAdministratoridUser");

                    b.HasIndex(new[] { "FkUserRequestAnsweridUserRequestAnswer" }, "user_request_answer_administr_fk_user_request_answerid_user_key")
                        .IsUnique();

                    b.ToTable("user_request_answer_administrator", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerOrganiser", b =>
                {
                    b.Property<int>("FkUserRequestAnsweridUserRequestAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_request_answerid_user_request_answer");

                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.HasKey("FkUserRequestAnsweridUserRequestAnswer", "FkOrganiseridUser")
                        .HasName("user_request_answer_organiser_pkey");

                    b.HasIndex("FkOrganiseridUser");

                    b.HasIndex(new[] { "FkUserRequestAnsweridUserRequestAnswer" }, "user_request_answer_organiser_fk_user_request_answerid_user_key")
                        .IsUnique();

                    b.ToTable("user_request_answer_organiser", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerUser", b =>
                {
                    b.Property<int>("FkUserRequestAnsweridUserRequestAnswer")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_request_answerid_user_request_answer");

                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.HasKey("FkUserRequestAnsweridUserRequestAnswer", "FkUseridUser")
                        .HasName("user_request_answer_user_pkey");

                    b.HasIndex("FkUseridUser");

                    b.HasIndex(new[] { "FkUserRequestAnsweridUserRequestAnswer" }, "user_request_answer_user_fk_user_request_answerid_user_requ_key")
                        .IsUnique();

                    b.ToTable("user_request_answer_user", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.AdministratorLoyalty", b =>
                {
                    b.Property<int>("FkAdministratoridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_administratorid_user");

                    b.Property<int>("FkLoyaltyidLoyalty")
                        .HasColumnType("integer")
                        .HasColumnName("fk_loyaltyid_loyalty");

                    b.HasKey("FkAdministratoridUser", "FkLoyaltyidLoyalty")
                        .HasName("administrator_loyalty_pkey");

                    b.HasIndex(new[] { "FkAdministratoridUser" }, "administrator_loyalty_fk_administratorid_user_key")
                        .IsUnique();

                    b.HasIndex(new[] { "FkLoyaltyidLoyalty" }, "administrator_loyalty_fk_loyaltyid_loyalty_key")
                        .IsUnique();

                    b.ToTable("administrator_loyalty", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.Loyalty", b =>
                {
                    b.Property<int>("IdLoyalty")
                        .HasColumnType("integer")
                        .HasColumnName("id_loyalty");

                    b.Property<DateOnly?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.HasKey("IdLoyalty")
                        .HasName("loyalty_pkey");

                    b.ToTable("loyalty", "models");

                    b.HasData(
                        new
                        {
                            IdLoyalty = 1,
                            Points = 0
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.OrganiserLoyalty", b =>
                {
                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.Property<int>("FkLoyaltyidLoyalty")
                        .HasColumnType("integer")
                        .HasColumnName("fk_loyaltyid_loyalty");

                    b.HasKey("FkOrganiseridUser", "FkLoyaltyidLoyalty")
                        .HasName("organiser_loyalty_pkey");

                    b.HasIndex(new[] { "FkLoyaltyidLoyalty" }, "organiser_loyalty_fk_loyaltyid_loyalty_key")
                        .IsUnique();

                    b.HasIndex(new[] { "FkOrganiseridUser" }, "organiser_loyalty_fk_organiserid_user_key")
                        .IsUnique();

                    b.ToTable("organiser_loyalty", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.UserLoyalty", b =>
                {
                    b.Property<int>("FkUseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_userid_user");

                    b.Property<int>("FkLoyaltyidLoyalty")
                        .HasColumnType("integer")
                        .HasColumnName("fk_loyaltyid_loyalty");

                    b.HasKey("FkUseridUser", "FkLoyaltyidLoyalty")
                        .HasName("user_loyalty_pkey");

                    b.HasIndex(new[] { "FkLoyaltyidLoyalty" }, "user_loyalty_fk_loyaltyid_loyalty_key")
                        .IsUnique();

                    b.HasIndex(new[] { "FkUseridUser" }, "user_loyalty_fk_userid_user_key")
                        .IsUnique();

                    b.ToTable("user_loyalty", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.Administrator", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("administrator_pkey");

                    b.ToTable("administrator", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.Organiser", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<int?>("FollowerCount")
                        .HasColumnType("integer")
                        .HasColumnName("follower_count");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("organiser_pkey");

                    b.ToTable("organiser", "models");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            FollowerCount = 0,
                            Rating = 5.0
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.OrganiserFeedback", b =>
                {
                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.Property<int>("FkFeedbackidFeedback")
                        .HasColumnType("integer")
                        .HasColumnName("fk_feedbackid_feedback");

                    b.HasKey("FkOrganiseridUser", "FkFeedbackidFeedback")
                        .HasName("organiser_feedback_pkey");

                    b.HasIndex(new[] { "FkFeedbackidFeedback" }, "organiser_feedback_fk_feedbackid_feedback_key")
                        .IsUnique();

                    b.ToTable("organiser_feedback", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.OrganiserTicket", b =>
                {
                    b.Property<int>("FkOrganiseridUser")
                        .HasColumnType("integer")
                        .HasColumnName("fk_organiserid_user");

                    b.Property<int>("FkTicketidTicket")
                        .HasColumnType("integer")
                        .HasColumnName("fk_ticketid_ticket");

                    b.HasKey("FkOrganiseridUser", "FkTicketidTicket")
                        .HasName("organiser_ticket_pkey");

                    b.HasIndex(new[] { "FkTicketidTicket" }, "organiser_ticket_fk_ticketid_ticket_key")
                        .IsUnique();

                    b.ToTable("organiser_ticket", "models");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.User", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("user_pkey");

                    b.ToTable("user", "models");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Name = "Event",
                            Password = "password123",
                            Surname = "Organizer",
                            Username = "organizer"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.UserType", b =>
                {
                    b.Property<int>("IdUserType")
                        .HasColumnType("integer")
                        .HasColumnName("id_user_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IdUserType")
                        .HasName("user_type_pkey");

                    b.ToTable("user_type", "models");

                    b.HasData(
                        new
                        {
                            IdUserType = 1,
                            Name = "Regular"
                        },
                        new
                        {
                            IdUserType = 2,
                            Name = "Organizer"
                        },
                        new
                        {
                            IdUserType = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Event", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.Category", "CategoryNavigation")
                        .WithMany("Events")
                        .HasForeignKey("Category")
                        .HasConstraintName("event_category_fkey");

                    b.HasOne("eventplus.models.Domain.Events.EventLocation", "FkEventLocationidEventLocationNavigation")
                        .WithOne("Event")
                        .HasForeignKey("eventplus.models.Domain.Events.Event", "FkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("event_fk_event_locationid_event_location_fkey");

                    b.HasOne("eventplus.models.Domain.Users.Organiser", "FkOrganiseridUserNavigation")
                        .WithMany("Events")
                        .HasForeignKey("FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("event_fk_organiserid_user_fkey");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("FkEventLocationidEventLocationNavigation");

                    b.Navigation("FkOrganiseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.EventLocation", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.Equipment", "HoldingEquipmentNavigation")
                        .WithMany("EventLocations")
                        .HasForeignKey("HoldingEquipment")
                        .HasConstraintName("event_location_holding_equipment_fkey");

                    b.Navigation("HoldingEquipmentNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.AdministratorFeedback", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Administrator", "FkAdministratoridUserNavigation")
                        .WithMany("AdministratorFeedbacks")
                        .HasForeignKey("FkAdministratoridUser")
                        .IsRequired()
                        .HasConstraintName("administrator_feedback_fk_administratorid_user_fkey");

                    b.HasOne("eventplus.models.Domain.Feedbacks.Feedback", "FkFeedbackidFeedbackNavigation")
                        .WithOne("AdministratorFeedback")
                        .HasForeignKey("eventplus.models.Domain.Feedbacks.AdministratorFeedback", "FkFeedbackidFeedback")
                        .IsRequired()
                        .HasConstraintName("administrator_feedback_fk_feedbackid_feedback_fkey");

                    b.Navigation("FkAdministratoridUserNavigation");

                    b.Navigation("FkFeedbackidFeedbackNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.Feedback", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.Event", "FkEventidEventNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("feedback_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Domain.Feedbacks.FeedbackType", "TypeNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Type")
                        .HasConstraintName("feedback_type_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.UserFeedback", b =>
                {
                    b.HasOne("eventplus.models.Domain.Feedbacks.Feedback", "FkFeedbackidFeedbackNavigation")
                        .WithOne("UserFeedback")
                        .HasForeignKey("eventplus.models.Domain.Feedbacks.UserFeedback", "FkFeedbackidFeedback")
                        .IsRequired()
                        .HasConstraintName("user_feedback_fk_feedbackid_feedback_fkey");

                    b.HasOne("eventplus.models.Domain.Users.User", "FkUseridUserNavigation")
                        .WithMany("UserFeedbacks")
                        .HasForeignKey("FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("user_feedback_fk_userid_user_fkey");

                    b.Navigation("FkFeedbackidFeedbackNavigation");

                    b.Navigation("FkUseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Seating", b =>
                {
                    b.HasOne("eventplus.models.Domain.Sectors.Sector", "FkSectoridSectorNavigation")
                        .WithMany("Seatings")
                        .HasForeignKey("FkSectoridSector")
                        .HasConstraintName("seating_fk_sectorid_sector_fkey");

                    b.Navigation("FkSectoridSectorNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Sector", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.EventLocation", "FkEventLocationidEventLocationNavigation")
                        .WithMany("Sectors")
                        .HasForeignKey("FkEventLocationidEventLocation")
                        .IsRequired()
                        .HasConstraintName("sector_fk_event_locationid_event_location_fkey");

                    b.Navigation("FkEventLocationidEventLocationNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.SectorPrice", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.Event", "FkEventidEventNavigation")
                        .WithMany("SectorPrices")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("sector_price_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Domain.Sectors.Sector", "FkSectoridSectorNavigation")
                        .WithMany("SectorPrices")
                        .HasForeignKey("FkSectoridSector")
                        .IsRequired()
                        .HasConstraintName("sector_price_fk_sectorid_sector_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("FkSectoridSectorNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.AdministratorTicket", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Administrator", "FkAdministratoridUserNavigation")
                        .WithMany("AdministratorTickets")
                        .HasForeignKey("FkAdministratoridUser")
                        .IsRequired()
                        .HasConstraintName("administrator_ticket_fk_administratorid_user_fkey");

                    b.HasOne("eventplus.models.Domain.Tickets.Ticket", "FkTicketidTicketNavigation")
                        .WithOne("AdministratorTicket")
                        .HasForeignKey("eventplus.models.Domain.Tickets.AdministratorTicket", "FkTicketidTicket")
                        .IsRequired()
                        .HasConstraintName("administrator_ticket_fk_ticketid_ticket_fkey");

                    b.Navigation("FkAdministratoridUserNavigation");

                    b.Navigation("FkTicketidTicketNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("eventplus.models.Domain.Events.Event", "FkEventidEventNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkEventidEvent")
                        .IsRequired()
                        .HasConstraintName("ticket_fk_eventid_event_fkey");

                    b.HasOne("eventplus.models.Domain.Sectors.Seating", "FkSeatingidSeatingNavigation")
                        .WithOne("Ticket")
                        .HasForeignKey("eventplus.models.Domain.Tickets.Ticket", "FkSeatingidSeating")
                        .IsRequired()
                        .HasConstraintName("ticket_fk_seatingid_seating_fkey");

                    b.HasOne("eventplus.models.Domain.Tickets.Ticketstatus", "FkTicketstatusNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("FkTicketstatus")
                        .IsRequired()
                        .HasConstraintName("ticket_fk_ticketstatus_fkey");

                    b.HasOne("eventplus.models.Domain.Tickets.TicketType", "TypeNavigation")
                        .WithMany("Tickets")
                        .HasForeignKey("Type")
                        .HasConstraintName("ticket_type_fkey");

                    b.Navigation("FkEventidEventNavigation");

                    b.Navigation("FkSeatingidSeatingNavigation");

                    b.Navigation("FkTicketstatusNavigation");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.UserTicket", b =>
                {
                    b.HasOne("eventplus.models.Domain.Tickets.Ticket", "FkTicketidTicketNavigation")
                        .WithOne("UserTicket")
                        .HasForeignKey("eventplus.models.Domain.Tickets.UserTicket", "FkTicketidTicket")
                        .IsRequired()
                        .HasConstraintName("user_ticket_fk_ticketid_ticket_fkey");

                    b.HasOne("eventplus.models.Domain.Users.User", "FkUseridUserNavigation")
                        .WithMany("UserTickets")
                        .HasForeignKey("FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("user_ticket_fk_userid_user_fkey");

                    b.Navigation("FkTicketidTicketNavigation");

                    b.Navigation("FkUseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.Question", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Administrator", "FkAdministratoridUserNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("FkAdministratoridUser")
                        .HasConstraintName("question_fk_administratorid_user_fkey");

                    b.Navigation("FkAdministratoridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswer", b =>
                {
                    b.HasOne("eventplus.models.Domain.UserAnswers.Question", "FkQuestionidQuestionNavigation")
                        .WithMany("UserRequestAnswers")
                        .HasForeignKey("FkQuestionidQuestion")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_fk_questionid_question_fkey");

                    b.Navigation("FkQuestionidQuestionNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerAdministrator", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Administrator", "FkAdministratoridUserNavigation")
                        .WithMany("UserRequestAnswerAdministrators")
                        .HasForeignKey("FkAdministratoridUser")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_administrator_fk_administratorid_user_fkey");

                    b.HasOne("eventplus.models.Domain.UserAnswers.UserRequestAnswer", "FkUserRequestAnsweridUserRequestAnswerNavigation")
                        .WithOne("UserRequestAnswerAdministrator")
                        .HasForeignKey("eventplus.models.Domain.UserAnswers.UserRequestAnswerAdministrator", "FkUserRequestAnsweridUserRequestAnswer")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_administr_fk_user_request_answerid_use_fkey");

                    b.Navigation("FkAdministratoridUserNavigation");

                    b.Navigation("FkUserRequestAnsweridUserRequestAnswerNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerOrganiser", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Organiser", "FkOrganiseridUserNavigation")
                        .WithMany("UserRequestAnswerOrganisers")
                        .HasForeignKey("FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_organiser_fk_organiserid_user_fkey");

                    b.HasOne("eventplus.models.Domain.UserAnswers.UserRequestAnswer", "FkUserRequestAnsweridUserRequestAnswerNavigation")
                        .WithOne("UserRequestAnswerOrganiser")
                        .HasForeignKey("eventplus.models.Domain.UserAnswers.UserRequestAnswerOrganiser", "FkUserRequestAnsweridUserRequestAnswer")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_organiser_fk_user_request_answerid_use_fkey");

                    b.Navigation("FkOrganiseridUserNavigation");

                    b.Navigation("FkUserRequestAnsweridUserRequestAnswerNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswerUser", b =>
                {
                    b.HasOne("eventplus.models.Domain.UserAnswers.UserRequestAnswer", "FkUserRequestAnsweridUserRequestAnswerNavigation")
                        .WithOne("UserRequestAnswerUser")
                        .HasForeignKey("eventplus.models.Domain.UserAnswers.UserRequestAnswerUser", "FkUserRequestAnsweridUserRequestAnswer")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_user_fk_user_request_answerid_user_req_fkey");

                    b.HasOne("eventplus.models.Domain.Users.User", "FkUseridUserNavigation")
                        .WithMany("UserRequestAnswerUsers")
                        .HasForeignKey("FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("user_request_answer_user_fk_userid_user_fkey");

                    b.Navigation("FkUserRequestAnsweridUserRequestAnswerNavigation");

                    b.Navigation("FkUseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.AdministratorLoyalty", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Administrator", "FkAdministratoridUserNavigation")
                        .WithOne("AdministratorLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.AdministratorLoyalty", "FkAdministratoridUser")
                        .IsRequired()
                        .HasConstraintName("administrator_loyalty_fk_administratorid_user_fkey");

                    b.HasOne("eventplus.models.Domain.UserLoyalties.Loyalty", "FkLoyaltyidLoyaltyNavigation")
                        .WithOne("AdministratorLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.AdministratorLoyalty", "FkLoyaltyidLoyalty")
                        .IsRequired()
                        .HasConstraintName("administrator_loyalty_fk_loyaltyid_loyalty_fkey");

                    b.Navigation("FkAdministratoridUserNavigation");

                    b.Navigation("FkLoyaltyidLoyaltyNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.OrganiserLoyalty", b =>
                {
                    b.HasOne("eventplus.models.Domain.UserLoyalties.Loyalty", "FkLoyaltyidLoyaltyNavigation")
                        .WithOne("OrganiserLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.OrganiserLoyalty", "FkLoyaltyidLoyalty")
                        .IsRequired()
                        .HasConstraintName("organiser_loyalty_fk_loyaltyid_loyalty_fkey");

                    b.HasOne("eventplus.models.Domain.Users.Organiser", "FkOrganiseridUserNavigation")
                        .WithOne("OrganiserLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.OrganiserLoyalty", "FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("organiser_loyalty_fk_organiserid_user_fkey");

                    b.Navigation("FkLoyaltyidLoyaltyNavigation");

                    b.Navigation("FkOrganiseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.UserLoyalty", b =>
                {
                    b.HasOne("eventplus.models.Domain.UserLoyalties.Loyalty", "FkLoyaltyidLoyaltyNavigation")
                        .WithOne("UserLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.UserLoyalty", "FkLoyaltyidLoyalty")
                        .IsRequired()
                        .HasConstraintName("user_loyalty_fk_loyaltyid_loyalty_fkey");

                    b.HasOne("eventplus.models.Domain.Users.User", "FkUseridUserNavigation")
                        .WithOne("UserLoyalty")
                        .HasForeignKey("eventplus.models.Domain.UserLoyalties.UserLoyalty", "FkUseridUser")
                        .IsRequired()
                        .HasConstraintName("user_loyalty_fk_userid_user_fkey");

                    b.Navigation("FkLoyaltyidLoyaltyNavigation");

                    b.Navigation("FkUseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.OrganiserFeedback", b =>
                {
                    b.HasOne("eventplus.models.Domain.Feedbacks.Feedback", "FkFeedbackidFeedbackNavigation")
                        .WithOne("OrganiserFeedback")
                        .HasForeignKey("eventplus.models.Domain.Users.OrganiserFeedback", "FkFeedbackidFeedback")
                        .IsRequired()
                        .HasConstraintName("organiser_feedback_fk_feedbackid_feedback_fkey");

                    b.HasOne("eventplus.models.Domain.Users.Organiser", "FkOrganiseridUserNavigation")
                        .WithMany("OrganiserFeedbacks")
                        .HasForeignKey("FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("organiser_feedback_fk_organiserid_user_fkey");

                    b.Navigation("FkFeedbackidFeedbackNavigation");

                    b.Navigation("FkOrganiseridUserNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.OrganiserTicket", b =>
                {
                    b.HasOne("eventplus.models.Domain.Users.Organiser", "FkOrganiseridUserNavigation")
                        .WithMany("OrganiserTickets")
                        .HasForeignKey("FkOrganiseridUser")
                        .IsRequired()
                        .HasConstraintName("organiser_ticket_fk_organiserid_user_fkey");

                    b.HasOne("eventplus.models.Domain.Tickets.Ticket", "FkTicketidTicketNavigation")
                        .WithOne("OrganiserTicket")
                        .HasForeignKey("eventplus.models.Domain.Users.OrganiserTicket", "FkTicketidTicket")
                        .IsRequired()
                        .HasConstraintName("organiser_ticket_fk_ticketid_ticket_fkey");

                    b.Navigation("FkOrganiseridUserNavigation");

                    b.Navigation("FkTicketidTicketNavigation");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Equipment", b =>
                {
                    b.Navigation("EventLocations");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.Event", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SectorPrices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("eventplus.models.Domain.Events.EventLocation", b =>
                {
                    b.Navigation("Event");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.Feedback", b =>
                {
                    b.Navigation("AdministratorFeedback");

                    b.Navigation("OrganiserFeedback");

                    b.Navigation("UserFeedback");
                });

            modelBuilder.Entity("eventplus.models.Domain.Feedbacks.FeedbackType", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Seating", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("eventplus.models.Domain.Sectors.Sector", b =>
                {
                    b.Navigation("Seatings");

                    b.Navigation("SectorPrices");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.Ticket", b =>
                {
                    b.Navigation("AdministratorTicket");

                    b.Navigation("OrganiserTicket");

                    b.Navigation("UserTicket");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("eventplus.models.Domain.Tickets.Ticketstatus", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.Question", b =>
                {
                    b.Navigation("UserRequestAnswers");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserAnswers.UserRequestAnswer", b =>
                {
                    b.Navigation("UserRequestAnswerAdministrator");

                    b.Navigation("UserRequestAnswerOrganiser");

                    b.Navigation("UserRequestAnswerUser");
                });

            modelBuilder.Entity("eventplus.models.Domain.UserLoyalties.Loyalty", b =>
                {
                    b.Navigation("AdministratorLoyalty");

                    b.Navigation("OrganiserLoyalty");

                    b.Navigation("UserLoyalty");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.Administrator", b =>
                {
                    b.Navigation("AdministratorFeedbacks");

                    b.Navigation("AdministratorLoyalty");

                    b.Navigation("AdministratorTickets");

                    b.Navigation("Questions");

                    b.Navigation("UserRequestAnswerAdministrators");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.Organiser", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("OrganiserFeedbacks");

                    b.Navigation("OrganiserLoyalty");

                    b.Navigation("OrganiserTickets");

                    b.Navigation("UserRequestAnswerOrganisers");
                });

            modelBuilder.Entity("eventplus.models.Domain.Users.User", b =>
                {
                    b.Navigation("UserFeedbacks");

                    b.Navigation("UserLoyalty");

                    b.Navigation("UserRequestAnswerUsers");

                    b.Navigation("UserTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
